pipeline {
  // Defining agent none at the top-level of the Pipeline ensures that an
  // Executor will not be assigned unnecessarily. Using agent none also forces
  // each stage section to contain its own agent section.
  agent none
  stages {
    stage('Build') {
      agent {
        docker {
          // When using Node based on Alpine, some additional packages are required
          // so that icon-genie can run. See https://github.com/imagemin/optipng-bin/issues/84
          // $ apk update && apk add pkgconfig autoconf automake libtool nasm build-base zlib-dev'
          image 'node:10.16.3-slim'
        }
      }
      steps {
        sh 'npm install'
        echo 'Dependencies installed'
        sh 'npm run prestart:prod'
        echo 'Build completed'
      }
    }

    stage('Deploy Docker stack') {
      // IMPORTANT: Deployment requires the following Jenkins configurations:
      // * SSH Agent Plugin
      // * SSH username-with-private-key (node1-ssh-private-key) credential to connect to the remote server
      // * SSH user-with-password (node1-ssh-password) credential for sudo operations
      agent {
        docker {
          image 'hecsalazarf/alpine:3.10'
          args  '-v /var/run/docker.sock:/var/run/docker.sock' // use same Docker daemon as the host's
        }
      }
      environment {
        DOCKER_TAG = 'hecsalazarf/gom-api' // Docker image tag
        REMOTE_TEMP_DIR = '/home/hector/gom-api/' // temporary directory on remote server to put files
        REMOTE_HOST = 'hecsalazarf.sytes.net' // remote host
        CRED_PRIVATE_KEY = 'node1-ssh-private-key' // remote host
        SSH = credentials('node1-ssh-password') // password credential
        SSH_OPTIONS = '-o StrictHostKeyChecking=no -p 6330'  // ssh options
      }
      steps {
        sshagent (credentials: [env.CRED_PRIVATE_KEY]) {
          sh 'jenkins/deploy.sh'
        }
      }
    }
  }
}
